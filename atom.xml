<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liberty&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-17T13:46:40.448Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhouhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>aliyu短信验证</title>
    <link href="http://yoursite.com/2017/10/17/%E9%98%BF%E9%87%8C%E5%A4%A7%E4%BA%8E%E7%9F%AD%E4%BF%A1%E5%B9%B3%E5%8F%B0%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://yoursite.com/2017/10/17/阿里大于短信平台验证码/</id>
    <published>2017-10-17T02:15:11.534Z</published>
    <updated>2017-10-17T13:46:40.448Z</updated>
    
    <content type="html"><![CDATA[<p>基于阿里大于的短信平台验证,实现项目中注册的验证,为什么选他,价格便宜,一条短信0.045元。<br><a id="more"></a></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>有淘宝账号的直接<a href="https://account.aliyun.com/login/login.htm?spm=5176.8142029.388261.6.Tw2yJ8&amp;qrCodeFirst=false&amp;oauth_callback=https%3A%2F%2Fwww.aliyun.com%2F%3Fspm%3D5176.sms-account.101.1.434d144eBwk3Ya" target="_blank" rel="external">登录</a><br>,没有就注册。<br><img src="/images/sms/1.jpg"></p>
<h3 id="短信签名-短信模板"><a href="#短信签名-短信模板" class="headerlink" title="短信签名,短信模板"></a>短信签名,短信模板</h3><p><img src="/images/sms/2.jpg"><br><img src="/images/sms/3.jpg"><br>签名这一栏里是你收到短信中的标题,自己填写合适的,一般只要不是敏感的词汇,审核都会过的,接下来是一个短息模板,就是短信的主体内容,搞完之后就等审核通过就可以用了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">短信发到手机上了,我就不截图了</div><div class="line"> 格式就像下面格式一样</div><div class="line"> :[签名]短息模板</div></pre></td></tr></table></figure></p>
<h3 id="申请访问有云产品API的访问权限秘钥"><a href="#申请访问有云产品API的访问权限秘钥" class="headerlink" title="申请访问有云产品API的访问权限秘钥"></a>申请访问有云产品API的访问权限秘钥</h3><p>进到里面生成一个就好<br><img src="/images/sms/4.jpg"></p>
<h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="架包"><a href="#架包" class="headerlink" title="架包"></a>架包</h3><p>依赖的jar包<a href="https://help.aliyun.com/document_detail/55359.html?spm=5176.doc55284.2.8.FvyKnS" target="_blank" rel="external">下载</a><br><img src="/images/sms/5.jpg"><br>下载后解压,这个不用我说吧,,,<br><img src="/images/sms/6.jpg"></p>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>总结一下：主要有是5个位置要改accessKeyId,accessKeySecret,短信签名,短信模板,接收短信的手机;如果你短信模板中有多个变量,改那个json就行了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">   //这是我从阿里的demo中拷过来的，自行封装成个工具类,提供一个code，和phone，就OK了</div><div class="line">   public static void main(String[] args) throws ServerException, ClientException &#123;</div><div class="line">   	//设置超时时间-可自行调整</div><div class="line">   	 System.setProperty(<span class="string">"sun.net.client.defaultConnectTimeout"</span>, <span class="string">"10000"</span>);</div><div class="line">   	 System.setProperty(<span class="string">"sun.net.client.defaultReadTimeout"</span>, <span class="string">"10000"</span>);</div><div class="line">   	 //初始化ascClient需要的几个参数</div><div class="line">   	 final String product = <span class="string">"Dysmsapi"</span>;//短信API产品名称（短信产品名固定，无需修改）</div><div class="line">   	 final String domain = <span class="string">"dysmsapi.aliyuncs.com"</span>;//短信API产品域名（接口地址固定，无需修改）</div><div class="line">   	 //替换成你的AK,这个就</div><div class="line">   	 final String accessKeyId = <span class="string">""</span>;//你的accessKeyId</div><div class="line">   	 final String accessKeySecret = <span class="string">""</span>;//你的accessKeySecret</div><div class="line">   	 //初始化ascClient,暂时不支持多region</div><div class="line">   	 IClientProfile profile = DefaultProfile.getProfile(<span class="string">"cn-hangzhou"</span>, accessKeyId,</div><div class="line">   	 accessKeySecret);</div><div class="line">   	 DefaultProfile.addEndpoint(<span class="string">"cn-hangzhou"</span>, <span class="string">"cn-hangzhou"</span>, product, domain);</div><div class="line">   	 IAcsClient acsClient = new DefaultAcsClient(profile);</div><div class="line">   	  //组装请求对象</div><div class="line">   	  SendSmsRequest request = new SendSmsRequest();</div><div class="line">   	  //使用post提交</div><div class="line">   	  request.setMethod(MethodType.POST);</div><div class="line">   	  //必填:待发送手机号。支持以逗号分隔的形式进行批量调用，批量上限为1000个手机号码,批量调用相对于单条调用及时性稍有延迟,验证码类型的短信推荐使用单条调用的方式</div><div class="line">   	  request.setPhoneNumbers(<span class="string">"11111111111"</span>);</div><div class="line">   	  //必填:短信签名-可在短信控制台中找到(刚才的短信签名)</div><div class="line">   	  request.setSignName(<span class="string">"？？？？"</span>);</div><div class="line">   	  //必填:短信模板-可在短信控制台中找到</div><div class="line">   	  request.setTemplateCode(<span class="string">"？？？？);</span></div><div class="line">   	  //可选:模板中的变量替换JSON串,如模板内容为"亲爱的<span class="variable">$&#123;name&#125;</span>,您的验证码为<span class="variable">$&#123;code&#125;</span><span class="string">"时,此处的值为</span></div><div class="line">   	  //友情提示:如果JSON中需要带换行符,请参照标准的JSON协议对换行符的要求,比如短信内容中包含\r\n的情况在JSON中需要表示成\\r\\n,否则会导致JSON在服务端解析失败</div><div class="line">   	  request.setTemplateParam("&#123;\<span class="string">"name\":\"tom\",\"code\":\"123\"&#125;"</span>);</div><div class="line">   	  //可选-上行短信扩展码(扩展码字段控制在7位或以下，无特殊需求用户请忽略此字段)</div><div class="line">   	  //request.setSmsUpExtendCode(<span class="string">"90997"</span>);</div><div class="line">   	  //可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</div><div class="line">   	 // request.setOutId(<span class="string">"yourOutId"</span>);</div><div class="line">   	 //请求失败这里会抛ClientException异常</div><div class="line">   	 SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);</div><div class="line">   	 <span class="keyword">if</span>(sendSmsResponse.getCode() != null &amp;&amp; sendSmsResponse.getCode().equals(<span class="string">"OK"</span>)) &#123;</div><div class="line">   	 //请求成功</div><div class="line">   	 </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="jar包导入maven的本地仓库"><a href="#jar包导入maven的本地仓库" class="headerlink" title="jar包导入maven的本地仓库"></a>jar包导入maven的本地仓库</h2><p>配置mvn的环境变量,将maven目录的bin目录配入环境变量中,和jdk环境配置相似配完后mvn -version测试环境<br>Dfile : 导入到maven仓库的jar包路径<br>DgroupId : 关联到本地maven仓库的父级文件夹名()<br>DartifactId : 导入jar包中的上层文件夹名<br>Dversion : 命名的版本号<br>mvn install:install-file -Dfile=”E:\github\dysms_java\java\api_demo\alicom-dysms-api\libs\aliyun-java-sdk-core-3.3.1.jar” -DgroupId=com.aliyun -DartifactId=aliyun-java-sdk-core -Dversion=3.3.1 -Dpackaging=jar<br>这是我的jar包分别把这两个架包导入本地仓库,我只示范一个。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于阿里大于的短信平台验证,实现项目中注册的验证,为什么选他,价格便宜,一条短信0.045元。&lt;br&gt;
    
    </summary>
    
      <category term="短信验证" scheme="http://yoursite.com/categories/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate入门</title>
    <link href="http://yoursite.com/2017/07/03/Hibernate/"/>
    <id>http://yoursite.com/2017/07/03/Hibernate/</id>
    <published>2017-07-03T00:24:27.140Z</published>
    <updated>2017-10-16T09:55:36.164Z</updated>
    
    <content type="html"><![CDATA[<p>简单的学习了Hibernate框架,一句话:看起来蛮简单，操作起来各种坑。我就把简单的环境配置搭建一遍，再把自己对Hibernate的理解总结一下。<br><a id="more"></a></p>
<h2 id="Hibernate框架的概述"><a href="#Hibernate框架的概述" class="headerlink" title="Hibernate框架的概述"></a>Hibernate框架的概述</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* Hibernate是一个开放源代码的对象关系映射（ORM）框架，它对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 </div><div class="line">* Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用。</div><div class="line">* Hibernate是轻量级JavaEE应用的持久层解决方案，是一个关系数据库ORM框架</div></pre></td></tr></table></figure>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>hibernate架包的下载<a href="https://sourceforge.net/projects/hibernate/files/hibernate-orm/" target="_blank" rel="external">hibernate官网</a><br><img src="/images/hibernate/1.jpg"><br><img src="/images/hibernate/2.jpg"></p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>我建的是web工程所以直接把架包拷到了lib目录下,如果建的是Java工程新建个文件夹为lib再buildpath下<br><img src="/images/hibernate/3.jpg"><br>接下来便是实体类的编写,实体类的编写主要是一些私有属性,再提供set,get方法下面是我创了一个名为User的实体类,<br><img src="/images/hibernate/4.jpg"><br>准备工作做好了，接下来便是hibernate中两个重要的配置文件了</p>
<h2 id="两个配置文件"><a href="#两个配置文件" class="headerlink" title="两个配置文件"></a>两个配置文件</h2><h3 id="orm的映射配置文件"><a href="#orm的映射配置文件" class="headerlink" title="orm的映射配置文件"></a>orm的映射配置文件</h3><p>命名：实体类名.hbm.xml<br>在编写实体类的包下新建一个xml文件,这个xml文件必须要和实体类在同一个包下,名字就是我上面的格式,我的就是User.hbm.xml<br>这个配置文件主要使User这个实体类和数据库中的表构成一种映射关系,User对应数据库中的表名,类中的属性对应表中的字段,达成这种关系后我们对实体类进行操作,实际就是对数据库表的操作,前提是User这个对象是持久态的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">  &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">  &lt;!DOCTYPE hibernate-mapping PUBLIC </div><div class="line">   <span class="string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></div><div class="line">   <span class="string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span>&gt;</div><div class="line">  &lt;hibernate-mapping&gt;</div><div class="line">    &lt;!-- 类名和表名达成映射关系 --&gt;</div><div class="line">    &lt;class name=<span class="string">"com.zhou.domain.User"</span> table=<span class="string">"T_USER"</span>&gt;</div><div class="line">     &lt;!-- 描述主键</div><div class="line">                       主要指定主键的生成策略有5种一般用native或者UUID</div><div class="line">       native:本地策略.根据底层的数据库不同,自动选择适用于该种数据库的生成策略</div><div class="line">       uuid:适用于char,varchar类型的作为主键,使用随机的字符串作为主键</div><div class="line">       column:对应表中的字段,如果不写默认和实体类中的属性名相同</div><div class="line">      --&gt;</div><div class="line">     &lt;id name=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;</div><div class="line">          &lt;generator class=<span class="string">"native"</span>&gt;&lt;/generator&gt;</div><div class="line">     &lt;/id&gt;</div><div class="line">     &lt;!--非主键的表字段--&gt;</div><div class="line">     &lt;property name=<span class="string">"username"</span>/&gt;</div><div class="line">     &lt;property name=<span class="string">"password"</span>/&gt;</div><div class="line">    &lt;/class&gt;</div><div class="line">&lt;/hibernate-mapping&gt;</div></pre></td></tr></table></figure></p>
<h3 id="hibernate-cfg-xml-核心的配置文件"><a href="#hibernate-cfg-xml-核心的配置文件" class="headerlink" title="hibernate.cfg.xml(核心的配置文件)"></a>hibernate.cfg.xml(核心的配置文件)</h3><p>核心配置文件放到根路径下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">  1. 核心配置文件的两种方式</div><div class="line">   * 第一种方式是属性文件的形式，即properties的配置文件</div><div class="line">       * hibernate.properties</div><div class="line">           * hibernate.connection.driver_class=com.mysql.jdbc.Driver</div><div class="line">       * 缺点</div><div class="line">           * 不能加载映射的配置文件，需要手动编写代码去加载</div><div class="line"></div><div class="line">   * 第二种方式是XML文件的形式，开发基本都会选择这种方式</div><div class="line">       * hibernate.cfg.xml</div><div class="line">           * &lt;property name=<span class="string">"hibernate.connection.driver_class"</span> &gt;com.mysql.jdbc.Driver&lt;/property&gt;</div><div class="line">       * 优点</div><div class="line">           * 格式比较清晰</div><div class="line">           * 编写有提示</div><div class="line">           * 可以在该配置文件中加载映射的配置文件（最主要的）</div><div class="line">    以xml文件为例</div><div class="line">  &lt;hibernate-configuration&gt;</div><div class="line"></div><div class="line">&lt;session-factory&gt;</div><div class="line">	//配置关于数据库连接的四个项 driverClass url username password（必须要，连接数据库的基本参数）</div><div class="line">	&lt;property name=<span class="string">"hibernate.connection.driver_class"</span>&gt;com.mysql.jdbc.Driver&lt;/property&gt;</div><div class="line">	&lt;property name=<span class="string">"hibernate.connection.url"</span>&gt;jdbc:mysql://localhost:3306/hibernatetest?useUnicode=<span class="literal">true</span>&amp;amp;characterEncoding=UTF-8&lt;/property&gt;</div><div class="line">	&lt;property name=<span class="string">"hibernate.connection.username"</span>&gt;root&lt;/property&gt;</div><div class="line">	&lt;property name=<span class="string">"hibernate.connection.password"</span>&gt;123&lt;/property&gt;</div><div class="line"></div><div class="line">	&lt;property name=<span class="string">"hibernate.show_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt;  //可以将向数据库发送的sql显示出来</div><div class="line">	&lt;property name=<span class="string">"hibernate.format_sql"</span>&gt;<span class="literal">true</span>&lt;/property&gt;  //格式化sql</div><div class="line"></div><div class="line">	//hibernate的方言（必须要,hibernate根据不同的数据库底层进行对数据库的操作）</div><div class="line">	&lt;property name=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;</div><div class="line">	//自动创建表,我们可以不用再到数据库中建表,会自动建</div><div class="line">	&lt;property name=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;update&lt;/property&gt;</div><div class="line">	//用于设置事务提交方式</div><div class="line">	&lt;property name=<span class="string">"hibernate.connection.autocommit"</span>&gt;<span class="literal">false</span>&lt;/property&gt;</div><div class="line">	//配置hibernate的映射文件所在位置（下面就是映射文件的配置）</div><div class="line">	&lt;mapping resource=<span class="string">"com/zhou/domain/User.hbm.xml"</span> /&gt;</div><div class="line">&lt;/session-factory&gt;</div><div class="line"></div><div class="line"> &lt;/hibernate-configuration&gt;</div></pre></td></tr></table></figure></p>
<p>写完之后,还差一个连接数据库的驱动包<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="external">mysql</a><br><img src="/images/hibernate/5.jpg"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  @Test</div><div class="line">public void <span class="function"><span class="title">f1</span></span>()&#123;</div><div class="line">	 // 先加载配置文件</div><div class="line">       Configuration config = new Configuration();</div><div class="line">       // 默认加载src目录下的配置文件</div><div class="line">       config.configure();</div><div class="line">       // 创建SessionFactory对象</div><div class="line">       SessionFactory factory = config.buildSessionFactory();</div><div class="line">       // 创建session对象</div><div class="line">       Session session = factory.openSession();</div><div class="line">       // 开启事务</div><div class="line">       Transaction tr = session.beginTransaction();</div><div class="line">       // 编写保存代码</div><div class="line">	User user = new User();</div><div class="line">	user.setUsername(<span class="string">"隔壁老王"</span>);</div><div class="line">	user.setPassword(<span class="string">"123456"</span>);</div><div class="line">	session.save(user);</div><div class="line">       //提交事务</div><div class="line">	tr.commit();</div><div class="line">	//关闭session</div><div class="line">	session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/hibernate/6.jpg"><br>得意忘形的我又运行一遍omg,既然报错了<br><img src="/images/hibernate/7.jpg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的学习了Hibernate框架,一句话:看起来蛮简单，操作起来各种坑。我就把简单的环境配置搭建一遍，再把自己对Hibernate的理解总结一下。&lt;br&gt;
    
    </summary>
    
      <category term="Hibernate" scheme="http://yoursite.com/categories/Hibernate/"/>
    
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>java面向对象</title>
    <link href="http://yoursite.com/2017/06/20/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/06/20/java面向对象/</id>
    <published>2017-06-20T13:44:36.000Z</published>
    <updated>2017-06-28T07:20:57.803Z</updated>
    
    <content type="html"><![CDATA[<p>今天,回顾了java语言中的面向对象,总的来说,我对于面向对象实际的理论理解还是有点不足,只会简单的应用。因为对象确实太过抽象,所以我只能简单的把我自己所理解的总结一下。我把它分三个板块，让自己有个比较清晰的思路。<br><a id="more"></a></p>
<h2 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h2><p>类的话按照标准的规范来说就是具有相同属性和方法的一组对象的集合。<br>类的概念使我们能对属于该类的全部对象进行统一的描述，学过c语言的可以通俗的认为是一种升级版的结构体。<br>片面的说类，就是一种具有特殊性质的模板，例如说，一栋房楼的图纸，这个图纸就是一个类。所以类可以理解成为就是把现实的事物通过类来描绘出来，那怎么定义??<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//简单的举几个例子</div><div class="line">class Student&#123;......&#125; //学生的一个模板 </div><div class="line">class People&#123;......&#125;  //人的一个模板</div><div class="line">class House&#123;......&#125;   //房子的一个模板</div><div class="line">class 类名&#123;......&#125;    //公用模板</div></pre></td></tr></table></figure></p>
<h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>对象就是类的实例化，实例化就是创建一个对象。<br>通俗点说，就是通过一个模板来完成这个模板所产生的一个个体。<br>对象的作用，使我们更加方便的开发一个项目（可以理解成，让我们更快的完成一件事）。<br>举个学生学习的例子：<br>自学java：很明显，首先你需要到网上查找资料，看自己需要什么类型的书籍，这个过程是漫长的，因为java的书籍太多了，很难找到适合自己的，然后，要布置相应的java运行环境，最后，你才能正式的开始学，不说你在前面踩了多少坑，重要的是往后的学习应该有个什么样的方向，这些都是需要你发时间了解的。这过程是繁琐的。<br>所以就有了对象，你直接发钱找个好老师教你不就ok了;</p>
<h2 id="对象怎么使用"><a href="#对象怎么使用" class="headerlink" title="对象怎么使用"></a>对象怎么使用</h2><p>就拿这个老师举例,我们如何找到这个老师，首先现实社会中必须有这个老师，这个老师应该是个什么样的呢？他有名字，年龄，性别，身高等等。那他会干什么？这是最重要的一点，如果他什么都不会，那我找他干吗，这是没有意义的。为满足我们的需求，他必须会教java，是否厉害，就得看他的教学能力了，不厉害的话，使用几天就可叫他走人了，再找一个不就ok了。<br>然后我们可以用代码描绘出来每个细节，由于java没有提供这个老师类，我们必须自己定义，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//按照上面的格式，这就是我所说的老师，我会写出他在java专有的名词解释</div><div class="line">//类(老师)</div><div class="line">class Teacher&#123;</div><div class="line">	//属性(名字，年龄，性别，身高)</div><div class="line">	String name;</div><div class="line">	int age;</div><div class="line">	String sex;</div><div class="line">	double height;</div><div class="line">	</div><div class="line">	//方法(这个老师会干嘛)</div><div class="line">	public void <span class="function"><span class="title">teach</span></span>()&#123;</div><div class="line">		System.out.println(<span class="string">"我会教java"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">//编写一个测试类(我们怎么找到他)</div><div class="line">public class Demo2 &#123;</div><div class="line">   //main方法(程序的入口)</div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">	 //a.new + class名()(找到他，我们怎么接收他？(让他住我家)所以要一个变量接收，这个变量实际就是个地址值)</div><div class="line">	 //b.(这个家在那)那这个对象的类型是什么，就是一个老师类啊----》Teacher</div><div class="line">	 Teacher t1 = new Teacher();</div><div class="line">	 </div><div class="line">	 //找到对象后怎么用他，t1.方法名(变量名.方法名)</div><div class="line">	 t1.teach();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果:我会教java<br>那怎么换老师呢，自己定义一个老师类就行了。然后按着代码来一遍不就OK了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天,回顾了java语言中的面向对象,总的来说,我对于面向对象实际的理论理解还是有点不足,只会简单的应用。因为对象确实太过抽象,所以我只能简单的把我自己所理解的总结一下。我把它分三个板块，让自己有个比较清晰的思路。&lt;br&gt;
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>个人情感</title>
    <link href="http://yoursite.com/2017/06/20/%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/06/20/博客/</id>
    <published>2017-06-19T16:17:06.000Z</published>
    <updated>2017-06-28T06:40:18.173Z</updated>
    
    <content type="html"><![CDATA[<p>历经千辛万苦,终于搭建好自己的博客</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;历经千辛万苦,终于搭建好自己的博客&lt;/p&gt;

    
    </summary>
    
      <category term="经历" scheme="http://yoursite.com/categories/%E7%BB%8F%E5%8E%86/"/>
    
    
      <category term="记录，心情" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BD%95%EF%BC%8C%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/06/18/hello-world/"/>
    <id>http://yoursite.com/2017/06/18/hello-world/</id>
    <published>2017-06-18T09:12:00.421Z</published>
    <updated>2017-06-18T09:12:00.422Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
